{
    "total_count": 44,
    "incomplete_results": false,
    "items": [
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/218",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/218/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/218/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/218/events",
            "html_url": "https://github.com/vektra/mockery/pull/218",
            "id": 380003255,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwMzA3ODUw",
            "number": 218,
            "title": "Support Go 1.11 modules",
            "user": {
                "login": "atombender",
                "id": 50314,
                "node_id": "MDQ6VXNlcjUwMzE0",
                "avatar_url": "https://avatars1.githubusercontent.com/u/50314?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/atombender",
                "html_url": "https://github.com/atombender",
                "followers_url": "https://api.github.com/users/atombender/followers",
                "following_url": "https://api.github.com/users/atombender/following{/other_user}",
                "gists_url": "https://api.github.com/users/atombender/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/atombender/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/atombender/subscriptions",
                "organizations_url": "https://api.github.com/users/atombender/orgs",
                "repos_url": "https://api.github.com/users/atombender/repos",
                "events_url": "https://api.github.com/users/atombender/events{/privacy}",
                "received_events_url": "https://api.github.com/users/atombender/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-11-13T00:10:50Z",
            "updated_at": "2018-11-13T00:39:31Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "pull_request": {
                "url": "https://api.github.com/repos/vektra/mockery/pulls/218",
                "html_url": "https://github.com/vektra/mockery/pull/218",
                "diff_url": "https://github.com/vektra/mockery/pull/218.diff",
                "patch_url": "https://github.com/vektra/mockery/pull/218.patch"
            },
            "body": "This uses the new package `golang.org/x/tools/go/packages` instead of `golang.org/x/tools/go/loader` to load code, so that we can support checking packages that use Go modules with Go >= 1.11. This fixes #213.\r\n\r\nThis preserves a bunch of code that probably isn't needed anymore; `go/packages` supports the Go package pattern that `go list`Â uses (in fact, it appears to use `go list` internally), so all the file system walking could be removed in favour of just relying on that. The current code is inefficient, since doing `packages.Load(&conf, \"file=./mypkg/myfile.go\")` actually loads the entire package, and there's no need to then do `packages.Load(&conf, \"file=./mypkg/otherfile.go\")`, since it's already loaded.\r\n\r\nThere is one change here that I wasn't 100% sure about. The generator test cases have a test case for relative paths, something which I believe is moot with the new Go module system (and I'm not even sure if relative imports are officially supported in Go?). I have removed the test case in favour of using Go module imports instead of relative ones. Comments are welcome.\r\n\r\nI added a `go.mod` file for good measure.\r\n\r\nNote that this changes Mockery to require Go >= 1.9, as `go/packages` does not support earlier versions.",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/217",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/217/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/217/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/217/events",
            "html_url": "https://github.com/vektra/mockery/pull/217",
            "id": 376613187,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjI3NzkyODgx",
            "number": 217,
            "title": "Add flags to specify generated struct and file names",
            "user": {
                "login": "pohang",
                "id": 19980697,
                "node_id": "MDQ6VXNlcjE5OTgwNjk3",
                "avatar_url": "https://avatars2.githubusercontent.com/u/19980697?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pohang",
                "html_url": "https://github.com/pohang",
                "followers_url": "https://api.github.com/users/pohang/followers",
                "following_url": "https://api.github.com/users/pohang/following{/other_user}",
                "gists_url": "https://api.github.com/users/pohang/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pohang/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pohang/subscriptions",
                "organizations_url": "https://api.github.com/users/pohang/orgs",
                "repos_url": "https://api.github.com/users/pohang/repos",
                "events_url": "https://api.github.com/users/pohang/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pohang/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-11-01T23:45:16Z",
            "updated_at": "2018-11-01T23:45:16Z",
            "closed_at": null,
            "author_association": "NONE",
            "pull_request": {
                "url": "https://api.github.com/repos/vektra/mockery/pulls/217",
                "html_url": "https://github.com/vektra/mockery/pull/217",
                "diff_url": "https://github.com/vektra/mockery/pull/217.diff",
                "patch_url": "https://github.com/vektra/mockery/pull/217.patch"
            },
            "body": "When a single mock is generated (non regex provided to -name),\r\ncan optionally specify -filename and/or -structname to override\r\nthe default names.",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/216",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/216/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/216/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/216/events",
            "html_url": "https://github.com/vektra/mockery/pull/216",
            "id": 370359542,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzMDU1MzI4",
            "number": 216,
            "title": "include compile-time type checks in output",
            "user": {
                "login": "thepwagner",
                "id": 1559510,
                "node_id": "MDQ6VXNlcjE1NTk1MTA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1559510?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/thepwagner",
                "html_url": "https://github.com/thepwagner",
                "followers_url": "https://api.github.com/users/thepwagner/followers",
                "following_url": "https://api.github.com/users/thepwagner/following{/other_user}",
                "gists_url": "https://api.github.com/users/thepwagner/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/thepwagner/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/thepwagner/subscriptions",
                "organizations_url": "https://api.github.com/users/thepwagner/orgs",
                "repos_url": "https://api.github.com/users/thepwagner/repos",
                "events_url": "https://api.github.com/users/thepwagner/events{/privacy}",
                "received_events_url": "https://api.github.com/users/thepwagner/received_events",
                "type": "User",
                "site_admin": true
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 4,
            "created_at": "2018-10-15T21:55:40Z",
            "updated_at": "2018-10-24T18:37:44Z",
            "closed_at": null,
            "author_association": "NONE",
            "pull_request": {
                "url": "https://api.github.com/repos/vektra/mockery/pulls/216",
                "html_url": "https://github.com/vektra/mockery/pull/216",
                "diff_url": "https://github.com/vektra/mockery/pull/216.diff",
                "patch_url": "https://github.com/vektra/mockery/pull/216.patch"
            },
            "body": "I want to be sure my generated mocks are in sync with the base\r\ninterface.\r\n\r\nFollowing the pattern from https://golang.org/doc/effective_go.html#blank_implements",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/215",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/215/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/215/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/215/events",
            "html_url": "https://github.com/vektra/mockery/issues/215",
            "id": 361904502,
            "node_id": "MDU6SXNzdWUzNjE5MDQ1MDI=",
            "number": 215,
            "title": "Matching expectation for mocks output for function with Variadic inputs",
            "user": {
                "login": "vish91",
                "id": 3489396,
                "node_id": "MDQ6VXNlcjM0ODkzOTY=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/3489396?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/vish91",
                "html_url": "https://github.com/vish91",
                "followers_url": "https://api.github.com/users/vish91/followers",
                "following_url": "https://api.github.com/users/vish91/following{/other_user}",
                "gists_url": "https://api.github.com/users/vish91/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/vish91/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vish91/subscriptions",
                "organizations_url": "https://api.github.com/users/vish91/orgs",
                "repos_url": "https://api.github.com/users/vish91/repos",
                "events_url": "https://api.github.com/users/vish91/events{/privacy}",
                "received_events_url": "https://api.github.com/users/vish91/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-09-19T19:58:54Z",
            "updated_at": "2018-09-19T19:58:54Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "I have a function that takes in a slice as an argument\r\n```\r\nfunc (b *batchFirer) Fire(ctx context.Context, id string, batch ...Items) {\r\n\r\n```\r\nfor which I see a difference between how `latest` generates the mock and how an older version generated mock for it. \r\nnew version : \r\n```\r\nfunc (_m *BatchFirer) Fire(_a0 context.Context, _a1 string, _a2 ...dao.Items) {\r\n\t_va := make([]interface{}, len(_a2))\r\n\tfor _i := range _a2 {\r\n\t\t_va[_i] = _a2[_i]\r\n\t}\r\n\tvar _ca []interface{}\r\n\t_ca = append(_ca, _a0, _a1)\r\n\t_ca = append(_ca, _va...)\r\n\t_m.Called(_ca...)\r\n}\r\n```\r\nolder version: \r\n```\r\nfunc (_m *BatchFirer) Fire(_a0 context.Context, _a1 string, _a2 ...dao.Items) {\r\n\t_m.Called(_a0,_a1,_a2)\r\n}\r\n```\r\n\r\n^ this cause issues because now where this mock is being called appends slice as an argument, but the expected assertion is expecting individual elements as arguments\r\n```\r\nlistOfItems := []Items{\"a\",\"b\",}\r\nmockItems.On(\"Fire\", mock.Anything, resp.ID, listOfItems)\r\n```\r\nExample error:\r\n```\r\nmock: Unexpected Method Call\r\n-----------------------------\r\n\r\nFire(*context.valueCtx,string,dao.Items,dao.Items)\r\n\t\t0: &context.valueCtx{Context:(*context.valueCtx)(0xc00013fce0), key:\"account_id\", val:\"account_1\"}\r\n\t\t1: \"abc\"\r\n\t\t2: dao.Items{\"a\"}\r\n\t\t3: dao.Items{\"b\"}\r\n\r\nThe closest call I have is: \r\n\r\nFire(string,string,[]dao.Items)\r\n\t\t0: \"mock.Anything\"\r\n\t\t1: \"abc\"\r\n\t\t2: []dao.Items{\"a\",\"b\"}\r\n\r\nProvided 3 arguments, mocked for 4 arguments\r\n......\tpanic: \r\n```\r\n\r\nCannot change \r\n`mockItems.On(\"Fire\", mock.Anything, resp.ID, listOfItems)` to \r\n`mockItems.On(\"Fire\", mock.Anything, resp.ID, listOfItems...)` because `fire` function expects []Items and not x Items\r\n\r\nIs there something that can be done to fix this situation of a slice being mocked to a variadic input, and mock function expecting 0..n string arguments being passed on mock call instead of expecting a []string as argument. ",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/214",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/214/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/214/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/214/events",
            "html_url": "https://github.com/vektra/mockery/pull/214",
            "id": 361687912,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MjE2NTkzNzY0",
            "number": 214,
            "title": "Test with Go 1.11",
            "user": {
                "login": "AlekSi",
                "id": 11512,
                "node_id": "MDQ6VXNlcjExNTEy",
                "avatar_url": "https://avatars1.githubusercontent.com/u/11512?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/AlekSi",
                "html_url": "https://github.com/AlekSi",
                "followers_url": "https://api.github.com/users/AlekSi/followers",
                "following_url": "https://api.github.com/users/AlekSi/following{/other_user}",
                "gists_url": "https://api.github.com/users/AlekSi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/AlekSi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/AlekSi/subscriptions",
                "organizations_url": "https://api.github.com/users/AlekSi/orgs",
                "repos_url": "https://api.github.com/users/AlekSi/repos",
                "events_url": "https://api.github.com/users/AlekSi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/AlekSi/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-09-19T10:45:25Z",
            "updated_at": "2018-09-19T10:45:25Z",
            "closed_at": null,
            "author_association": "NONE",
            "pull_request": {
                "url": "https://api.github.com/repos/vektra/mockery/pulls/214",
                "html_url": "https://github.com/vektra/mockery/pull/214",
                "diff_url": "https://github.com/vektra/mockery/pull/214.diff",
                "patch_url": "https://github.com/vektra/mockery/pull/214.patch"
            },
            "body": "",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/213",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/213/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/213/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/213/events",
            "html_url": "https://github.com/vektra/mockery/issues/213",
            "id": 354928065,
            "node_id": "MDU6SXNzdWUzNTQ5MjgwNjU=",
            "number": 213,
            "title": "Fails with import errors with modules on Go 1.11",
            "user": {
                "login": "atombender",
                "id": 50314,
                "node_id": "MDQ6VXNlcjUwMzE0",
                "avatar_url": "https://avatars1.githubusercontent.com/u/50314?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/atombender",
                "html_url": "https://github.com/atombender",
                "followers_url": "https://api.github.com/users/atombender/followers",
                "following_url": "https://api.github.com/users/atombender/following{/other_user}",
                "gists_url": "https://api.github.com/users/atombender/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/atombender/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/atombender/subscriptions",
                "organizations_url": "https://api.github.com/users/atombender/orgs",
                "repos_url": "https://api.github.com/users/atombender/repos",
                "events_url": "https://api.github.com/users/atombender/events{/privacy}",
                "received_events_url": "https://api.github.com/users/atombender/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 7,
            "created_at": "2018-08-28T22:30:14Z",
            "updated_at": "2018-11-08T10:22:43Z",
            "closed_at": null,
            "author_association": "CONTRIBUTOR",
            "body": "If I have a simple file such as this that refers to an imported package:\r\n\r\n```\r\npackage mypackage\r\nimport \"github.com/jackc/pgx\"\r\n// ...\r\n```\r\n\r\nthen it fails with:\r\n\r\n```\r\n/Users/alex/.go/pkg/mod/github.com/jackc/pgx@v3.1.0+incompatible/batch.go:6:2: could not import github.com/jackc/pgx/pgproto3 (cannot find package \"github.com/jackc/pgx/pgproto3\" in any of:\r\n\t/usr/local/opt/go/libexec/src/github.com/jackc/pgx/pgproto3 (from $GOROOT)\r\n\t/Users/alex/.go/src/github.com/jackc/pgx/pgproto3 (from $GOPATH))\r\n```\r\n\r\nIn other words, it's looking for the source in the old location, not in `$GOPATH/pkg/mod`.\r\n\r\nI'm able to reproduce this in a small Go program that uses `golang.org/x/tools/go/loader` to load files, and I can confirm that it does not work with Go modules. (E.g. see [this issue](https://github.com/google/go-cloud/issues/78) for discussion.) Apparently the `golang.org/x/tools/go/loader` library has been superceded by [golang.org/x/tools/go/packages](https://godoc.org/golang.org/x/tools/go/packages), which is module-aware.\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/212",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/212/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/212/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/212/events",
            "html_url": "https://github.com/vektra/mockery/issues/212",
            "id": 353820992,
            "node_id": "MDU6SXNzdWUzNTM4MjA5OTI=",
            "number": 212,
            "title": "Please cut a release",
            "user": {
                "login": "smikulcik",
                "id": 5778248,
                "node_id": "MDQ6VXNlcjU3NzgyNDg=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/5778248?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/smikulcik",
                "html_url": "https://github.com/smikulcik",
                "followers_url": "https://api.github.com/users/smikulcik/followers",
                "following_url": "https://api.github.com/users/smikulcik/following{/other_user}",
                "gists_url": "https://api.github.com/users/smikulcik/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/smikulcik/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/smikulcik/subscriptions",
                "organizations_url": "https://api.github.com/users/smikulcik/orgs",
                "repos_url": "https://api.github.com/users/smikulcik/repos",
                "events_url": "https://api.github.com/users/smikulcik/events{/privacy}",
                "received_events_url": "https://api.github.com/users/smikulcik/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-08-24T15:04:57Z",
            "updated_at": "2018-08-24T15:04:57Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Currently, I'm using this package for generating mocks and I'm pinning to master. However, other people on my team have different versions of this package.  Would you please create a release on github with a semver so that I can leverage go's dependency management and pin to a version instead of a hash?",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/211",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/211/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/211/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/211/events",
            "html_url": "https://github.com/vektra/mockery/issues/211",
            "id": 350872908,
            "node_id": "MDU6SXNzdWUzNTA4NzI5MDg=",
            "number": 211,
            "title": "Using Keeptree does not preserve the package name",
            "user": {
                "login": "bah2830",
                "id": 7529310,
                "node_id": "MDQ6VXNlcjc1MjkzMTA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/7529310?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bah2830",
                "html_url": "https://github.com/bah2830",
                "followers_url": "https://api.github.com/users/bah2830/followers",
                "following_url": "https://api.github.com/users/bah2830/following{/other_user}",
                "gists_url": "https://api.github.com/users/bah2830/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bah2830/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bah2830/subscriptions",
                "organizations_url": "https://api.github.com/users/bah2830/orgs",
                "repos_url": "https://api.github.com/users/bah2830/repos",
                "events_url": "https://api.github.com/users/bah2830/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bah2830/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-08-15T16:18:39Z",
            "updated_at": "2018-08-15T16:19:24Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "When generating a lot of mocks from several interfaces across multiple sub packages the -keeptree flag does not preserve the package name. This means mocks several levels down will have the same package name making import paths require aliases on everything.\r\n\r\nIt would be nice to have a flag to preserve the package name when using -keeptree or as a bonus a way to preserve the package and add a prefix or postfix to the package name.",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/210",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/210/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/210/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/210/events",
            "html_url": "https://github.com/vektra/mockery/issues/210",
            "id": 350087938,
            "node_id": "MDU6SXNzdWUzNTAwODc5Mzg=",
            "number": 210,
            "title": "\"Mocking\" a third-party interface",
            "user": {
                "login": "MikeWarren2014",
                "id": 10160410,
                "node_id": "MDQ6VXNlcjEwMTYwNDEw",
                "avatar_url": "https://avatars1.githubusercontent.com/u/10160410?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/MikeWarren2014",
                "html_url": "https://github.com/MikeWarren2014",
                "followers_url": "https://api.github.com/users/MikeWarren2014/followers",
                "following_url": "https://api.github.com/users/MikeWarren2014/following{/other_user}",
                "gists_url": "https://api.github.com/users/MikeWarren2014/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/MikeWarren2014/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/MikeWarren2014/subscriptions",
                "organizations_url": "https://api.github.com/users/MikeWarren2014/orgs",
                "repos_url": "https://api.github.com/users/MikeWarren2014/repos",
                "events_url": "https://api.github.com/users/MikeWarren2014/events{/privacy}",
                "received_events_url": "https://api.github.com/users/MikeWarren2014/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-08-13T15:50:21Z",
            "updated_at": "2018-08-24T15:30:12Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "In the code under test, there are two methods of a `struct` that ultimately depends on a [`Session.Store`](https://github.com/astaxie/beego). When I tried to use mockery to generate a \"mock\" of that interface, with `mockery -name Store -inpkg %GOPATH%/src/github.com/astaxie/beego/session`, it tells me that it's `Unable to find Store in any go files under this path`. However, I can not only `cd` into that path, from where I was, but say `mockery -name Store -inpkg .`, and it generates the mock there. **I want it near my test code!**",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/207",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/207/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/207/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/207/events",
            "html_url": "https://github.com/vektra/mockery/issues/207",
            "id": 347216300,
            "node_id": "MDU6SXNzdWUzNDcyMTYzMDA=",
            "number": 207,
            "title": "Idea: NOOP Generator",
            "user": {
                "login": "corsc",
                "id": 1555989,
                "node_id": "MDQ6VXNlcjE1NTU5ODk=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1555989?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/corsc",
                "html_url": "https://github.com/corsc",
                "followers_url": "https://api.github.com/users/corsc/followers",
                "following_url": "https://api.github.com/users/corsc/following{/other_user}",
                "gists_url": "https://api.github.com/users/corsc/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/corsc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/corsc/subscriptions",
                "organizations_url": "https://api.github.com/users/corsc/orgs",
                "repos_url": "https://api.github.com/users/corsc/repos",
                "events_url": "https://api.github.com/users/corsc/events{/privacy}",
                "received_events_url": "https://api.github.com/users/corsc/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 2,
            "created_at": "2018-08-03T00:13:39Z",
            "updated_at": "2018-08-16T00:12:30Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "I really enjoy using Mockery; In particular, I love how I can keep my mocks \"up to date\" with `go generate` like this:\r\n`//go:generate mockery -name=RateLimiter -case underscore -testonly -inpkg -note @generated`\r\n\r\nI was wondering if you would accept an extension to mockery that generated NOOPs instead of mocks?\r\nIf you think this is \"out of scope\" that is fine, perhaps expected.  But with your permission, I would very much base any NOOP generator off the Mockery UX.\r\n\r\nThanks",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/206",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/206/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/206/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/206/events",
            "html_url": "https://github.com/vektra/mockery/issues/206",
            "id": 346763928,
            "node_id": "MDU6SXNzdWUzNDY3NjM5Mjg=",
            "number": 206,
            "title": "-inpkg and -output options don't work together",
            "user": {
                "login": "limscoder",
                "id": 121623,
                "node_id": "MDQ6VXNlcjEyMTYyMw==",
                "avatar_url": "https://avatars0.githubusercontent.com/u/121623?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/limscoder",
                "html_url": "https://github.com/limscoder",
                "followers_url": "https://api.github.com/users/limscoder/followers",
                "following_url": "https://api.github.com/users/limscoder/following{/other_user}",
                "gists_url": "https://api.github.com/users/limscoder/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/limscoder/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/limscoder/subscriptions",
                "organizations_url": "https://api.github.com/users/limscoder/orgs",
                "repos_url": "https://api.github.com/users/limscoder/repos",
                "events_url": "https://api.github.com/users/limscoder/events{/privacy}",
                "received_events_url": "https://api.github.com/users/limscoder/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-08-01T20:51:30Z",
            "updated_at": "2018-08-14T16:47:54Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "`-inpkg` flag generates the mock file in the same directory as the source file, specifying `-output` has no effect when `-inpkg` is set.\r\n\r\nI'd like to have a directory structure like this:\r\n\r\n```\r\n- packagename\r\n  - mocks\r\n    mock_client.go\r\n  client.go\r\n```",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/205",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/205/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/205/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/205/events",
            "html_url": "https://github.com/vektra/mockery/issues/205",
            "id": 342761108,
            "node_id": "MDU6SXNzdWUzNDI3NjExMDg=",
            "number": 205,
            "title": "Always Prefixing Generated Mock Prefixes",
            "user": {
                "login": "bloudraak",
                "id": 622724,
                "node_id": "MDQ6VXNlcjYyMjcyNA==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/622724?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bloudraak",
                "html_url": "https://github.com/bloudraak",
                "followers_url": "https://api.github.com/users/bloudraak/followers",
                "following_url": "https://api.github.com/users/bloudraak/following{/other_user}",
                "gists_url": "https://api.github.com/users/bloudraak/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bloudraak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bloudraak/subscriptions",
                "organizations_url": "https://api.github.com/users/bloudraak/orgs",
                "repos_url": "https://api.github.com/users/bloudraak/repos",
                "events_url": "https://api.github.com/users/bloudraak/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bloudraak/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-07-19T14:47:27Z",
            "updated_at": "2018-07-19T14:47:43Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Assuming the following interface \r\n\r\n```\r\ntype Logger interface {\r\n\tEnabled(level LogLevel) bool\r\n\tLogFunc(level LogLevel, eventId EventId, state interface{}, err error, formatter LogFunc)\r\n\tLog(level LogLevel, eventId EventId, err error, format string, args ...interface{})\r\n\tLogCritical(eventId EventId, err error, format string, args ...interface{})\r\n\tLogError(eventId EventId, err error, format string, args ...interface{})\r\n\tLogInformation(eventId EventId, err error, format string, args ...interface{})\r\n\tLogWarning(eventId EventId, err error, format string, args ...interface{})\r\n\tLogDebug(eventId EventId, err error, format string, args ...interface{})\r\n\tLogTrace(eventId EventId, err error, format string, args ...interface{})\r\n}\r\n```\r\n\r\nI noticed that if I generate a mock as follows `MockLogger` will be generated in the same package.\r\n\r\n```\r\nmockery.exe -dir .. -all -name Logger -case=underscore -inpkg\r\n```\r\n\r\nI do prefer having a `mocks` package with all the mocks since I can exclude the entire directory whenever I build the release binaries. \r\n\r\n```\r\nmockery.exe -dir .. -all -case=underscore\r\n```\r\n\r\nI'd still like to prefix all mock structs with `Mock` (or even `Stub`) so that the code is clear in its intent and there is no confusion between the interface and the mock class. ",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/204",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/204/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/204/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/204/events",
            "html_url": "https://github.com/vektra/mockery/issues/204",
            "id": 342756508,
            "node_id": "MDU6SXNzdWUzNDI3NTY1MDg=",
            "number": 204,
            "title": "Support Stubs",
            "user": {
                "login": "bloudraak",
                "id": 622724,
                "node_id": "MDQ6VXNlcjYyMjcyNA==",
                "avatar_url": "https://avatars2.githubusercontent.com/u/622724?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/bloudraak",
                "html_url": "https://github.com/bloudraak",
                "followers_url": "https://api.github.com/users/bloudraak/followers",
                "following_url": "https://api.github.com/users/bloudraak/following{/other_user}",
                "gists_url": "https://api.github.com/users/bloudraak/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/bloudraak/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/bloudraak/subscriptions",
                "organizations_url": "https://api.github.com/users/bloudraak/orgs",
                "repos_url": "https://api.github.com/users/bloudraak/repos",
                "events_url": "https://api.github.com/users/bloudraak/events{/privacy}",
                "received_events_url": "https://api.github.com/users/bloudraak/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-07-19T14:36:58Z",
            "updated_at": "2018-07-19T14:49:19Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Consider the following interface\r\n\r\n```\r\ntype Logger interface {\r\n\tEnabled(level LogLevel) bool\r\n\tLogFunc(level LogLevel, eventId EventId, state interface{}, err error, formatter LogFunc)\r\n\tLog(level LogLevel, eventId EventId, err error, format string, args ...interface{})\r\n\tLogCritical(eventId EventId, err error, format string, args ...interface{})\r\n\tLogError(eventId EventId, err error, format string, args ...interface{})\r\n\tLogInformation(eventId EventId, err error, format string, args ...interface{})\r\n\tLogWarning(eventId EventId, err error, format string, args ...interface{})\r\n\tLogDebug(eventId EventId, err error, format string, args ...interface{})\r\n\tLogTrace(eventId EventId, err error, format string, args ...interface{})\r\n}\r\n```\r\n\r\nI generated a mock for it using \r\n\r\n```\r\nmockery.exe -dir .. -all -case=underscore -inpkg\r\n```\r\n\r\nAnd use it in my tests as follows:\r\n\r\n```\r\nlogger := &mocks.Logger{}\r\nlogger.On(\"LogInformation\", nil, nil, \"Scanning '%s'\", basePath)\r\nlogger.On(\"LogInformation\", nil, nil, \"Scanned '%s'\", basePath)\r\nloggerFactory := &mocks.LoggerFactory{}\r\nloggerFactory.On(\"CreateLogger\", \"Joernaal\").Return(logger, nil)\r\n```\r\n\r\nNaturally, logging is important, so there is plenty of it in the code. That said, explicitly mocking each call to the logger is can be very tedious and labor intensive. It also makes tests a bit more brittle, especially when you have hundreds or thousands of tests. \r\n\r\nIs there a way to stub the entire class such that all calls to its methods are ignored, and the number of parameters passed doesn't really matter? Some may argue that it defeats some part of the unit test, but a balance must be struck between test coverage and maintainability. \r\n\r\nI was thinking about something like the following which should then ignore any calls to `LogInformation` or `LogDebug`. \r\n\r\n```\r\nlogger := &mocks.Logger{}\r\nlogger.On(\"LogInformation\").Stub()\r\nlogger.On(\"LogDebug\").Stub()\r\n```\r\n\r\nIf methods returned a value, I could return a default value regardless of the parameters passed. \r\n\r\n```\r\nlogger := &mocks.Logger{}\r\nlogger.On(\"Enabled\").Return(true).Stub()\r\n```\r\n\r\nOr perhaps I could just stub the entire interface. If the method returns something, it can return whatever the default value is for those methods.\r\n\r\n```\r\nlogger := &mocks.Logger{}\r\nlogger.Stub()\r\n```\r\n\r\nAny thoughts? ",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/203",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/203/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/203/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/203/events",
            "html_url": "https://github.com/vektra/mockery/issues/203",
            "id": 336258859,
            "node_id": "MDU6SXNzdWUzMzYyNTg4NTk=",
            "number": 203,
            "title": "Generated import path contain \"vendor\" on Windows",
            "user": {
                "login": "welemon",
                "id": 1468285,
                "node_id": "MDQ6VXNlcjE0NjgyODU=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/1468285?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/welemon",
                "html_url": "https://github.com/welemon",
                "followers_url": "https://api.github.com/users/welemon/followers",
                "following_url": "https://api.github.com/users/welemon/following{/other_user}",
                "gists_url": "https://api.github.com/users/welemon/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/welemon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/welemon/subscriptions",
                "organizations_url": "https://api.github.com/users/welemon/orgs",
                "repos_url": "https://api.github.com/users/welemon/repos",
                "events_url": "https://api.github.com/users/welemon/events{/privacy}",
                "received_events_url": "https://api.github.com/users/welemon/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-06-27T14:38:49Z",
            "updated_at": "2018-06-27T14:43:20Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "latest mockery tool generated mock go file wrongly on Windows OS.\r\nThe import path shall contain \"vendor\" folder and cause test phase build error.\r\nFor example:\r\n`import bolt \"github.com/welemon/vendor/github.com/boltdb/bolt\"`\r\nlead to build error\r\n`mocks\\db.go:4:8: must be imported as github.com/boltdb/bolt`\r\n\r\nThis issue does not exist on Mac / Linux.\r\nAfter quick check, I think the issue is because of \"generator.go\" line 180\r\n`directories := strings.Split(path, string(filepath.Separator))`\r\nThe function is intended to remove the \"vendor\" and fix the import path.\r\nBut `path` var could already contains only slash ('/'), not backslack('\\\\') on Windows.\r\nUsing `filepath.Separator` here will cause the `path` not tokenize correctly.\r\nThis also explain why only happen on Windows.\r\n\r\nI tested with changing the `filepath.Separator` to slash, will fix the generated mock file.\r\n\r\nPlease fix this issue so that mockery can work on Windows properly? Thanks.\r\n\r\n\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/202",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/202/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/202/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/202/events",
            "html_url": "https://github.com/vektra/mockery/issues/202",
            "id": 331489495,
            "node_id": "MDU6SXNzdWUzMzE0ODk0OTU=",
            "number": 202,
            "title": "Use Mockery to generate mock in directory",
            "user": {
                "login": "jasmineustc",
                "id": 9027927,
                "node_id": "MDQ6VXNlcjkwMjc5Mjc=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/9027927?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jasmineustc",
                "html_url": "https://github.com/jasmineustc",
                "followers_url": "https://api.github.com/users/jasmineustc/followers",
                "following_url": "https://api.github.com/users/jasmineustc/following{/other_user}",
                "gists_url": "https://api.github.com/users/jasmineustc/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jasmineustc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jasmineustc/subscriptions",
                "organizations_url": "https://api.github.com/users/jasmineustc/orgs",
                "repos_url": "https://api.github.com/users/jasmineustc/repos",
                "events_url": "https://api.github.com/users/jasmineustc/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jasmineustc/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-06-12T08:34:34Z",
            "updated_at": "2018-06-12T08:38:00Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Hi team, \r\n\r\nI have a question about generating mocks in package.  Here is the package directory. \r\n\r\ndir1 \r\n    |_dir1sub1\r\n                       |______dir1sub1_sub1\r\n                                                |_____________File1.go\r\n    |_dir1sub2\r\n                      |_______File2.go\r\n\r\nI defined interface for mockery in both File1.go and File2.go. I know that using \"mockery -all -inpkg\" could generate mocks inside the package, and using \"mockery -all -output=aaa\" could generate mocks inside one package with name \"aaa\". I'm wondering that can I generate the mocks inside the package and generate another directory like below?  Any kind of help is appreciated. \r\n\r\ndir1 \r\n    |_dir1sub1\r\n                       |_________dir1sub1_sub1\r\n                                                |_________________File1.go\r\n                                                |_________________mock\r\n                                                                          |________________________File1_mock.go\r\n    |_dir1sub2\r\n                      |_________________File2.go\r\n                      |_________________mock\r\n                                                |________________________File1_mock.go\r\n\r\n\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/201",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/201/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/201/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/201/events",
            "html_url": "https://github.com/vektra/mockery/issues/201",
            "id": 331441858,
            "node_id": "MDU6SXNzdWUzMzE0NDE4NTg=",
            "number": 201,
            "title": "Some help avoiding import cycles?",
            "user": {
                "login": "kleijnweb",
                "id": 8375560,
                "node_id": "MDQ6VXNlcjgzNzU1NjA=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/8375560?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kleijnweb",
                "html_url": "https://github.com/kleijnweb",
                "followers_url": "https://api.github.com/users/kleijnweb/followers",
                "following_url": "https://api.github.com/users/kleijnweb/following{/other_user}",
                "gists_url": "https://api.github.com/users/kleijnweb/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kleijnweb/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kleijnweb/subscriptions",
                "organizations_url": "https://api.github.com/users/kleijnweb/orgs",
                "repos_url": "https://api.github.com/users/kleijnweb/repos",
                "events_url": "https://api.github.com/users/kleijnweb/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kleijnweb/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 2,
            "created_at": "2018-06-12T05:26:19Z",
            "updated_at": "2018-06-12T06:53:49Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "I am banging my head on import cycles caused by generated mocks. When an interfaces' signatures reference other types in the mocked interfaces' package, this occurs due to the unit tests being in that same package: `ut (mypackage) > mock (mocks) > inpackagedep (mypackage)`.\r\n\r\nHow do I get around this once and for all?",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/197",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/197/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/197/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/197/events",
            "html_url": "https://github.com/vektra/mockery/issues/197",
            "id": 319408908,
            "node_id": "MDU6SXNzdWUzMTk0MDg5MDg=",
            "number": 197,
            "title": "Error walking String: mock.go:5:13: invalid import path:",
            "user": {
                "login": "muhammadaser",
                "id": 3253478,
                "node_id": "MDQ6VXNlcjMyNTM0Nzg=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/3253478?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/muhammadaser",
                "html_url": "https://github.com/muhammadaser",
                "followers_url": "https://api.github.com/users/muhammadaser/followers",
                "following_url": "https://api.github.com/users/muhammadaser/following{/other_user}",
                "gists_url": "https://api.github.com/users/muhammadaser/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/muhammadaser/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/muhammadaser/subscriptions",
                "organizations_url": "https://api.github.com/users/muhammadaser/orgs",
                "repos_url": "https://api.github.com/users/muhammadaser/repos",
                "events_url": "https://api.github.com/users/muhammadaser/events{/privacy}",
                "received_events_url": "https://api.github.com/users/muhammadaser/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-05-02T04:48:58Z",
            "updated_at": "2018-05-08T08:48:28Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "i got an error while genereate interface, my error \r\n`Error walking String: mock.go:5:13: invalid import path: \"C:/Users/aser-jatis/go/src/github.com/aser/referral/test/\"`\r\n\r\nAnd this is full code on bash.\r\n\r\n```\r\nGenerating mock for: String\r\nBetween the lines is the file (mock.go) mockery generated in-memory but detected as invalid:\r\n--------------------------------------------------------------------------------------------\r\n// Code generated by mockery v1.0.0\r\npackage mocks\r\n\r\nimport mock \"github.com/stretchr/testify/mock\"\r\nimport test \"C:/Users/aser-jatis/go/src/github.com/aser/referral/test/\"\r\n\r\n// String is an autogenerated mock type for the String type\r\ntype String struct {\r\n        mock.Mock\r\n}\r\n\r\n// ListLimit provides a mock function with given fields: a\r\nfunc (_m *String) ListLimit(a string) error {\r\n        ret := _m.Called(a)\r\n\r\n        var r0 error\r\n        if rf, ok := ret.Get(0).(func(string) error); ok {\r\n                r0 = rf(a)\r\n        } else {\r\n                r0 = ret.Error(0)\r\n        }\r\n\r\n        return r0\r\n}\r\n\r\n--------------------------------------------------------------------------------------------\r\nError walking String: mock.go:5:13: invalid import path: \"C:/Users/aser-jatis/go/src/github.com/aser/referral/test/\"\r\n```\r\nthis error generate empty file in `./mocks/String.go`\r\n\r\n\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/195",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/195/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/195/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/195/events",
            "html_url": "https://github.com/vektra/mockery/pull/195",
            "id": 312482216,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MTgwMjc0MzE1",
            "number": 195,
            "title": "Allow to pass to Mock.Return one func that return all out params.",
            "user": {
                "login": "skipor",
                "id": 4019825,
                "node_id": "MDQ6VXNlcjQwMTk4MjU=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/4019825?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/skipor",
                "html_url": "https://github.com/skipor",
                "followers_url": "https://api.github.com/users/skipor/followers",
                "following_url": "https://api.github.com/users/skipor/following{/other_user}",
                "gists_url": "https://api.github.com/users/skipor/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/skipor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/skipor/subscriptions",
                "organizations_url": "https://api.github.com/users/skipor/orgs",
                "repos_url": "https://api.github.com/users/skipor/repos",
                "events_url": "https://api.github.com/users/skipor/events{/privacy}",
                "received_events_url": "https://api.github.com/users/skipor/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 3,
            "created_at": "2018-04-09T10:47:32Z",
            "updated_at": "2018-08-15T00:06:22Z",
            "closed_at": null,
            "author_association": "NONE",
            "pull_request": {
                "url": "https://api.github.com/repos/vektra/mockery/pulls/195",
                "html_url": "https://github.com/vektra/mockery/pull/195",
                "diff_url": "https://github.com/vektra/mockery/pull/195.diff",
                "patch_url": "https://github.com/vektra/mockery/pull/195.patch"
            },
            "body": "Allow to pass to Mock.Return one func that return all out params.\r\nFixes #194 ",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/194",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/194/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/194/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/194/events",
            "html_url": "https://github.com/vektra/mockery/issues/194",
            "id": 312481007,
            "node_id": "MDU6SXNzdWUzMTI0ODEwMDc=",
            "number": 194,
            "title": "Allow to \"Return\" one func returning all out params",
            "user": {
                "login": "skipor",
                "id": 4019825,
                "node_id": "MDQ6VXNlcjQwMTk4MjU=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/4019825?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/skipor",
                "html_url": "https://github.com/skipor",
                "followers_url": "https://api.github.com/users/skipor/followers",
                "following_url": "https://api.github.com/users/skipor/following{/other_user}",
                "gists_url": "https://api.github.com/users/skipor/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/skipor/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/skipor/subscriptions",
                "organizations_url": "https://api.github.com/users/skipor/orgs",
                "repos_url": "https://api.github.com/users/skipor/repos",
                "events_url": "https://api.github.com/users/skipor/events{/privacy}",
                "received_events_url": "https://api.github.com/users/skipor/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-04-09T10:43:18Z",
            "updated_at": "2018-04-09T10:43:18Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Now it's required to pass one function per out param, but usually it's much simpler to return all out params at once",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/193",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/193/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/193/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/193/events",
            "html_url": "https://github.com/vektra/mockery/issues/193",
            "id": 310682419,
            "node_id": "MDU6SXNzdWUzMTA2ODI0MTk=",
            "number": 193,
            "title": "Non-pointer struct return turns into pointer in mock",
            "user": {
                "login": "mitchellh",
                "id": 1299,
                "node_id": "MDQ6VXNlcjEyOTk=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1299?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mitchellh",
                "html_url": "https://github.com/mitchellh",
                "followers_url": "https://api.github.com/users/mitchellh/followers",
                "following_url": "https://api.github.com/users/mitchellh/following{/other_user}",
                "gists_url": "https://api.github.com/users/mitchellh/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mitchellh/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mitchellh/subscriptions",
                "organizations_url": "https://api.github.com/users/mitchellh/orgs",
                "repos_url": "https://api.github.com/users/mitchellh/repos",
                "events_url": "https://api.github.com/users/mitchellh/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mitchellh/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-04-03T03:32:59Z",
            "updated_at": "2018-04-03T03:32:59Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Given this interface:\r\n\r\n```go\r\ntype B struct{}\r\n\r\ntype A interface {\r\n  Call() (B, err)\r\n}\r\n```\r\n\r\nThe resulting mock has this:\r\n\r\n```go\r\nCall() (*B, err)\r\n```\r\n\r\nIt should not be a pointer. ð ",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/192",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/192/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/192/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/192/events",
            "html_url": "https://github.com/vektra/mockery/issues/192",
            "id": 310442565,
            "node_id": "MDU6SXNzdWUzMTA0NDI1NjU=",
            "number": 192,
            "title": "Add method names as constants",
            "user": {
                "login": "GhostRussia",
                "id": 12181586,
                "node_id": "MDQ6VXNlcjEyMTgxNTg2",
                "avatar_url": "https://avatars0.githubusercontent.com/u/12181586?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/GhostRussia",
                "html_url": "https://github.com/GhostRussia",
                "followers_url": "https://api.github.com/users/GhostRussia/followers",
                "following_url": "https://api.github.com/users/GhostRussia/following{/other_user}",
                "gists_url": "https://api.github.com/users/GhostRussia/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/GhostRussia/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/GhostRussia/subscriptions",
                "organizations_url": "https://api.github.com/users/GhostRussia/orgs",
                "repos_url": "https://api.github.com/users/GhostRussia/repos",
                "events_url": "https://api.github.com/users/GhostRussia/events{/privacy}",
                "received_events_url": "https://api.github.com/users/GhostRussia/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 2,
            "created_at": "2018-04-02T09:42:44Z",
            "updated_at": "2018-07-02T14:52:22Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Example:\r\n```go\r\n\timage := new(mocks.Image)\r\n-\timage.On(\"Add\", mock.Anything)\r\n+\timage.On(mocks.ImageMethodAdd, mock.Anything)\r\n```\r\n\r\n```go\r\ntype Image struct {\r\n\tmock.Mock\r\n}\r\n\r\n+ const (\r\n+ \tImageMethodAdd = \"Add\"\r\n+ \tImageMethodGet = \"Get\"\r\n+ )\r\n\r\nfunc (_m *Image) Add(image model.Image) (uint64, error) {}\r\nfunc (_m *Image) Get(settings storage.SettingsImage) ([]model.Image, error) {}\r\n...\r\n```",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/191",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/191/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/191/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/191/events",
            "html_url": "https://github.com/vektra/mockery/issues/191",
            "id": 309297072,
            "node_id": "MDU6SXNzdWUzMDkyOTcwNzI=",
            "number": 191,
            "title": "Add option to generate exported mock type for internal interfaces",
            "user": {
                "login": "pkosiec",
                "id": 7155799,
                "node_id": "MDQ6VXNlcjcxNTU3OTk=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/7155799?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pkosiec",
                "html_url": "https://github.com/pkosiec",
                "followers_url": "https://api.github.com/users/pkosiec/followers",
                "following_url": "https://api.github.com/users/pkosiec/following{/other_user}",
                "gists_url": "https://api.github.com/users/pkosiec/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pkosiec/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pkosiec/subscriptions",
                "organizations_url": "https://api.github.com/users/pkosiec/orgs",
                "repos_url": "https://api.github.com/users/pkosiec/repos",
                "events_url": "https://api.github.com/users/pkosiec/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pkosiec/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-03-28T09:54:53Z",
            "updated_at": "2018-03-28T11:43:28Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "#Hi,\r\nGreat tool, I really like it! Is there a possibility to add a new option like `-exported=true`, which will make internal interfaces exported?\r\nPlease consider an example:\r\n\r\n```\r\n//go:generate mockery -name=foo -output=automock -outpkg=automock -case=underscore -exported=true\r\ntype foo interface {\r\n\tBar(name string) (string, bool, error)\r\n}\r\n```\r\n\r\nIt could generate a mock type in `automock` package with a name `Foo`, which is easy to use in test files.\r\n\r\n**Alternative:**\r\nIt could generate a constructor for this type, which can be used from outside of the `automock` package.\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/187",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/187/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/187/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/187/events",
            "html_url": "https://github.com/vektra/mockery/issues/187",
            "id": 300951976,
            "node_id": "MDU6SXNzdWUzMDA5NTE5NzY=",
            "number": 187,
            "title": "Generate mock which implements multiple interfaces",
            "user": {
                "login": "jonathanbp",
                "id": 27257,
                "node_id": "MDQ6VXNlcjI3MjU3",
                "avatar_url": "https://avatars3.githubusercontent.com/u/27257?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jonathanbp",
                "html_url": "https://github.com/jonathanbp",
                "followers_url": "https://api.github.com/users/jonathanbp/followers",
                "following_url": "https://api.github.com/users/jonathanbp/following{/other_user}",
                "gists_url": "https://api.github.com/users/jonathanbp/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jonathanbp/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jonathanbp/subscriptions",
                "organizations_url": "https://api.github.com/users/jonathanbp/orgs",
                "repos_url": "https://api.github.com/users/jonathanbp/repos",
                "events_url": "https://api.github.com/users/jonathanbp/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jonathanbp/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-02-28T09:35:34Z",
            "updated_at": "2018-07-27T13:35:12Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Is it possible to generate a mock that implements multiple interfaces?",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/182",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/182/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/182/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/182/events",
            "html_url": "https://github.com/vektra/mockery/issues/182",
            "id": 291960275,
            "node_id": "MDU6SXNzdWUyOTE5NjAyNzU=",
            "number": 182,
            "title": "mockery does not recognize type alias",
            "user": {
                "login": "yiminc",
                "id": 10816227,
                "node_id": "MDQ6VXNlcjEwODE2MjI3",
                "avatar_url": "https://avatars1.githubusercontent.com/u/10816227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/yiminc",
                "html_url": "https://github.com/yiminc",
                "followers_url": "https://api.github.com/users/yiminc/followers",
                "following_url": "https://api.github.com/users/yiminc/following{/other_user}",
                "gists_url": "https://api.github.com/users/yiminc/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/yiminc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yiminc/subscriptions",
                "organizations_url": "https://api.github.com/users/yiminc/orgs",
                "repos_url": "https://api.github.com/users/yiminc/repos",
                "events_url": "https://api.github.com/users/yiminc/events{/privacy}",
                "received_events_url": "https://api.github.com/users/yiminc/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2018-01-26T16:40:18Z",
            "updated_at": "2018-01-26T16:40:44Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "With golang 1.9\r\n\r\n== Repro code:\r\n```\r\ntype (\r\n\tfoo struct {\r\n\t}\r\n\r\n\tBar = foo\r\n\r\n\tBarFactory interface {\r\n\t\tNewBar() (*Bar, error)\r\n\t}\r\n)\r\n\r\n```\r\n== Generated mock:\r\n```\r\n// BarFactory is an autogenerated mock type for the BarFactory type\r\ntype BarFactory struct {\r\n\tmock.Mock\r\n}\r\n\r\n// NewBar provides a mock function with given fields:\r\n// BarFactory is an autogenerated mock type for the BarFactory type\r\ntype BarFactory struct {\r\n\tmock.Mock\r\n}\r\n\r\n// NewBar provides a mock function with given fields:\r\nfunc (_m *BarFactory) NewBar() (*client.foo, error) {\r\n\tret := _m.Called()\r\n\r\n\tvar r0 *client.foo\r\n\tif rf, ok := ret.Get(0).(func() *client.foo); ok {\r\n\t\tr0 = rf()\r\n\t} else {\r\n\t\tif ret.Get(0) != nil {\r\n\t\t\tr0 = ret.Get(0).(*client.foo)\r\n\t\t}\r\n\t}\r\n\r\n\tvar r1 error\r\n\tif rf, ok := ret.Get(1).(func() error); ok {\r\n\t\tr1 = rf()\r\n\t} else {\r\n\t\tr1 = ret.Error(1)\r\n\t}\r\n\r\n\treturn r0, r1\r\n}\r\n\r\n```\r\n== Expected behavior:\r\nmock's NewBar() should return *client.Bar which is public\r\n\r\n== Actual result:\r\nmock's NewBar() return *Client.foo which is private\r\n\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/181",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/181/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/181/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/181/events",
            "html_url": "https://github.com/vektra/mockery/issues/181",
            "id": 290599577,
            "node_id": "MDU6SXNzdWUyOTA1OTk1Nzc=",
            "number": 181,
            "title": "mockery does not work with type alias",
            "user": {
                "login": "yiminc",
                "id": 10816227,
                "node_id": "MDQ6VXNlcjEwODE2MjI3",
                "avatar_url": "https://avatars1.githubusercontent.com/u/10816227?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/yiminc",
                "html_url": "https://github.com/yiminc",
                "followers_url": "https://api.github.com/users/yiminc/followers",
                "following_url": "https://api.github.com/users/yiminc/following{/other_user}",
                "gists_url": "https://api.github.com/users/yiminc/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/yiminc/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/yiminc/subscriptions",
                "organizations_url": "https://api.github.com/users/yiminc/orgs",
                "repos_url": "https://api.github.com/users/yiminc/repos",
                "events_url": "https://api.github.com/users/yiminc/events{/privacy}",
                "received_events_url": "https://api.github.com/users/yiminc/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-01-22T20:12:21Z",
            "updated_at": "2018-04-12T20:13:10Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "golang 1.9 introduce the type alias feature.\r\nmockery is not able to generate mock for interface that is defined as alias of another interface.\r\n\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/180",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/180/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/180/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/180/events",
            "html_url": "https://github.com/vektra/mockery/issues/180",
            "id": 288616994,
            "node_id": "MDU6SXNzdWUyODg2MTY5OTQ=",
            "number": 180,
            "title": "Publish docker image",
            "user": {
                "login": "pavolloffay",
                "id": 5618424,
                "node_id": "MDQ6VXNlcjU2MTg0MjQ=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/5618424?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/pavolloffay",
                "html_url": "https://github.com/pavolloffay",
                "followers_url": "https://api.github.com/users/pavolloffay/followers",
                "following_url": "https://api.github.com/users/pavolloffay/following{/other_user}",
                "gists_url": "https://api.github.com/users/pavolloffay/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/pavolloffay/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/pavolloffay/subscriptions",
                "organizations_url": "https://api.github.com/users/pavolloffay/orgs",
                "repos_url": "https://api.github.com/users/pavolloffay/repos",
                "events_url": "https://api.github.com/users/pavolloffay/events{/privacy}",
                "received_events_url": "https://api.github.com/users/pavolloffay/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2018-01-15T14:43:40Z",
            "updated_at": "2018-08-15T00:13:49Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Hi all, \r\n\r\nthanks for the awesome tool! Could you please publish docker images with this binary? It simplifies dev and CI usage. ",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/178",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/178/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/178/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/178/events",
            "html_url": "https://github.com/vektra/mockery/issues/178",
            "id": 281956930,
            "node_id": "MDU6SXNzdWUyODE5NTY5MzA=",
            "number": 178,
            "title": "Cannot mock function that uses iterator pattern ",
            "user": {
                "login": "etsangsplk",
                "id": 24395937,
                "node_id": "MDQ6VXNlcjI0Mzk1OTM3",
                "avatar_url": "https://avatars0.githubusercontent.com/u/24395937?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/etsangsplk",
                "html_url": "https://github.com/etsangsplk",
                "followers_url": "https://api.github.com/users/etsangsplk/followers",
                "following_url": "https://api.github.com/users/etsangsplk/following{/other_user}",
                "gists_url": "https://api.github.com/users/etsangsplk/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/etsangsplk/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/etsangsplk/subscriptions",
                "organizations_url": "https://api.github.com/users/etsangsplk/orgs",
                "repos_url": "https://api.github.com/users/etsangsplk/repos",
                "events_url": "https://api.github.com/users/etsangsplk/events{/privacy}",
                "received_events_url": "https://api.github.com/users/etsangsplk/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2017-12-14T01:56:44Z",
            "updated_at": "2018-10-26T03:25:33Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Related to https://github.com/vektra/mockery/issues/151\r\n\r\nMy code is basically the following link:\r\nhttps://github.com/aws/aws-sdk-go/blob/d41099e55d33fd32290ab6223bfdf83da8693d68/service/s3/api.go#L3878\r\nAs you see:\r\nlastPage bool\r\nlastPage as false will stop the iteration that is returned form within the anonymous function to signal termination, true is keep on looping.\r\nlastPage is the second argument bool, and the return bool.\r\n\r\nI am using this as mock in test code:\r\nsuite.mockS3.On(\"ListObjectVersionsPages\", mock.AnythingOfType(\"*s3.ListObjectVersionsInput\"), **mock.AnythingOfType(\"func(*ecs.ListClustersOutput, bool) bool\")).Return(nil)**\r\n\r\nBut mocking  func(*ecs.ListClustersOutput, **bool**) bool does not let me set the value of lastPage,a dn when test executes and get called into real code, it will loop forever.\r\n\r\nIs there a way to avoid infinite looping.\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/177",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/177/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/177/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/177/events",
            "html_url": "https://github.com/vektra/mockery/issues/177",
            "id": 280435949,
            "node_id": "MDU6SXNzdWUyODA0MzU5NDk=",
            "number": 177,
            "title": "Why do i have to duplicate code for multiple return values?",
            "user": {
                "login": "jonaz",
                "id": 1146389,
                "node_id": "MDQ6VXNlcjExNDYzODk=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/1146389?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jonaz",
                "html_url": "https://github.com/jonaz",
                "followers_url": "https://api.github.com/users/jonaz/followers",
                "following_url": "https://api.github.com/users/jonaz/following{/other_user}",
                "gists_url": "https://api.github.com/users/jonaz/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jonaz/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jonaz/subscriptions",
                "organizations_url": "https://api.github.com/users/jonaz/orgs",
                "repos_url": "https://api.github.com/users/jonaz/repos",
                "events_url": "https://api.github.com/users/jonaz/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jonaz/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2017-12-08T10:03:42Z",
            "updated_at": "2017-12-08T10:03:42Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "This is what i have to write to get it to work\r\n\r\n```\r\n\tlist := []minio.ObjectInfo{\r\n\t\t{\r\n\t\t\tKey:          \"test1\",\r\n\t\t\tLastModified: time.Now().Add(-time.Hour * 25),\r\n\t\t},\r\n\t\t{\r\n\t\t\tKey:          \"test2\",\r\n\t\t\tLastModified: time.Now(),\r\n\t\t},\r\n\t\t{\r\n\t\t\tKey:          \"test3\",\r\n\t\t\tLastModified: time.Now(),\r\n\t\t},\r\n\t\t{\r\n\t\t\tKey:          \"test4\",\r\n\t\t\tLastModified: time.Now().Add(-time.Hour * 24),\r\n\t\t},\r\n\t}\r\n\ts3mock.On(\"StatObject\", \"testBucket\", mock.AnythingOfType(\"string\"), mock.AnythingOfType(\"minio.StatObjectOptions\")).\r\n\t\tReturn(func(bucketName, key string, opts minio.StatObjectOptions) minio.ObjectInfo {\r\n\t\t\tfor _, v := range list {\r\n\t\t\t\tif key == v.Key {\r\n\t\t\t\t\tv.Metadata = http.Header{}\r\n\t\t\t\t\tv.Metadata.Add(\"X-Amz-Meta-Ttl\", \"24h\")\r\n\t\t\t\t\treturn v\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn minio.ObjectInfo{}\r\n\t\t},\r\n\t\t\tfunc(bucketName, key string, opts minio.StatObjectOptions) error {\r\n\t\t\t\tfor _, v := range list {\r\n\t\t\t\t\tif key == v.Key {\r\n\t\t\t\t\t\treturn nil\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn fmt.Errorf(\"object not found\")\r\n\t\t\t}).Times(4)\r\n```\r\n\r\n\r\nI would prefer:\r\n```\r\n\ts3mock.On(\"StatObject\", \"testBucket\", mock.AnythingOfType(\"string\"), mock.AnythingOfType(\"minio.StatObjectOptions\")).\r\n\t\tReturn(func(bucketName, key string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {\r\n\t\t\tfor _, v := range list {\r\n\t\t\t\tif key == v.Key {\r\n\t\t\t\t\tv.Metadata = http.Header{}\r\n\t\t\t\t\tv.Metadata.Add(\"X-Amz-Meta-Ttl\", \"24h\")\r\n\t\t\t\t\treturn v,nil\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn minio.ObjectInfo{}, fmt.Errorf(\"object not found\")\r\n\t\t}).Times(4)\r\n```\r\n",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/176",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/176/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/176/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/176/events",
            "html_url": "https://github.com/vektra/mockery/issues/176",
            "id": 274249217,
            "node_id": "MDU6SXNzdWUyNzQyNDkyMTc=",
            "number": 176,
            "title": "Typo in the README",
            "user": {
                "login": "timendez",
                "id": 4667806,
                "node_id": "MDQ6VXNlcjQ2Njc4MDY=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/4667806?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/timendez",
                "html_url": "https://github.com/timendez",
                "followers_url": "https://api.github.com/users/timendez/followers",
                "following_url": "https://api.github.com/users/timendez/following{/other_user}",
                "gists_url": "https://api.github.com/users/timendez/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/timendez/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/timendez/subscriptions",
                "organizations_url": "https://api.github.com/users/timendez/orgs",
                "repos_url": "https://api.github.com/users/timendez/repos",
                "events_url": "https://api.github.com/users/timendez/events{/privacy}",
                "received_events_url": "https://api.github.com/users/timendez/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 1,
            "created_at": "2017-11-15T17:56:22Z",
            "updated_at": "2018-10-03T16:23:45Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "`Caseing` should be `Casing`",
            "score": 1
        },
        {
            "url": "https://api.github.com/repos/vektra/mockery/issues/174",
            "repository_url": "https://api.github.com/repos/vektra/mockery",
            "labels_url": "https://api.github.com/repos/vektra/mockery/issues/174/labels{/name}",
            "comments_url": "https://api.github.com/repos/vektra/mockery/issues/174/comments",
            "events_url": "https://api.github.com/repos/vektra/mockery/issues/174/events",
            "html_url": "https://github.com/vektra/mockery/issues/174",
            "id": 267967014,
            "node_id": "MDU6SXNzdWUyNjc5NjcwMTQ=",
            "number": 174,
            "title": "Request to add git revision to generated files",
            "user": {
                "login": "morriswinkler-simple",
                "id": 23188943,
                "node_id": "MDQ6VXNlcjIzMTg4OTQz",
                "avatar_url": "https://avatars0.githubusercontent.com/u/23188943?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/morriswinkler-simple",
                "html_url": "https://github.com/morriswinkler-simple",
                "followers_url": "https://api.github.com/users/morriswinkler-simple/followers",
                "following_url": "https://api.github.com/users/morriswinkler-simple/following{/other_user}",
                "gists_url": "https://api.github.com/users/morriswinkler-simple/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/morriswinkler-simple/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/morriswinkler-simple/subscriptions",
                "organizations_url": "https://api.github.com/users/morriswinkler-simple/orgs",
                "repos_url": "https://api.github.com/users/morriswinkler-simple/repos",
                "events_url": "https://api.github.com/users/morriswinkler-simple/events{/privacy}",
                "received_events_url": "https://api.github.com/users/morriswinkler-simple/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2017-10-24T09:50:42Z",
            "updated_at": "2017-10-24T09:50:42Z",
            "closed_at": null,
            "author_association": "NONE",
            "body": "Hello I have a request to add a header that hodls the mockery version \r\n\r\n```\r\n// Generated by mockery \r\n// GIT-REF: b6f6c13c25c3f0a17724553fa01580f328158d7a\r\n\r\npackage mocks\r\n```\r\n\r\nPlease, Please....",
            "score": 1
        }
    ]
}